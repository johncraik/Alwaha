@using AlwahaLibrary.Services
@inject UserInfo UserInfo
@model (List<AlwahaLibrary.Models.ItemType> Types, bool IsRestore)

@if (!Model.Types.Any())
{
    <div class="alert alert-info text-center">
        <i class="fa-solid fa-info-circle me-2"></i>No item types found.
    </div>
}
else
{
    <ul id="sortable-list" class="list-group" aria-label="Reorder options">
    @foreach (var type in Model.Types)
    {
        <li class="list-group-item item-type-card d-flex align-items-center border-0 shadow-sm mb-2" data-id="@type.ItemTypeId">
            @if (!Model.IsRestore)
            {
                <button class="btn btn-sm btn-gradient-purple text-white me-3" aria-label="Drag @type.Name">⋮⋮</button>
            }
            <span class="label fw-semibold">@type.Name</span>
            <div class="btn-group ms-auto" role="group" aria-label="Row actions">
              @if (Model.IsRestore && UserInfo.CanRestore())
              {
                  <button type="button" class="btn btn-sm btn-outline-success js-no-drag js-restore" aria-label="Restore @type.Name"
                          onclick="confirmRestore('@type.Name', '/Menu/RestoreType?id=@type.ItemTypeId', 'item-list', undefined)">
                    <span class="fa-solid fa-trash-restore"></span> Restore
                  </button>
              }
              else
              {
                  @if (UserInfo.CanEdit())
                  {
                      <button type="button" class="btn btn-sm btn-outline-primary js-no-drag js-edit" aria-label="Edit @type.Name"
                              onclick="location.assign('/Menu/ItemTypes/Edit/@type.ItemTypeId')">
                        <span class="fa-solid fa-pencil"></span>
                      </button>
                  }
                  @if (UserInfo.CanDelete())
                  {
                      <button type="button" class="btn btn-sm btn-outline-danger js-no-drag js-delete" aria-label="Delete @type.Name"
                              onclick="confirmDelete('@type.Name', '/Menu/DeleteType?id=@type.ItemTypeId', 'item-list', undefined)">
                        <span class="fa-solid fa-trash"></span>
                      </button>
                  }
              }
            </div>
        </li>
    }
    </ul>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
      const listEl = document.getElementById('sortable-list');
      const errorBanner = document.getElementById('error-banner');

      const reorderUrl = '/Menu/ReorderTypes';
      const refreshUrl = '/Menu/GetItemTypesList';
      
      function getIdsInOrder() {
        return Array.from(listEl.querySelectorAll('li')).map(li => li.dataset.id);
      }

      new Sortable(listEl, {
        animation: 150,
        ghostClass: 'drag-ghost',
        chosenClass: 'drag-picked',
        dragClass: 'dragging',
        filter: '.js-no-drag',
        preventOnFilter: true,
        onEnd: async () => {
          const ids = getIdsInOrder();
          try {
            const res = await fetch(reorderUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ ids })
            });
            if (res.ok) {
              try {
                location.reload();
              } catch {}
            }
          } catch {
          }
        }
      });
    });
    </script>
}