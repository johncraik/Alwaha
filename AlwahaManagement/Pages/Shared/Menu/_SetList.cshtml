@using AlwahaLibrary.Helpers
@model List<IGrouping<AlwahaLibrary.Models.ItemType, AlwahaLibrary.Models.MenuItem>>

@foreach (var group in Model)
{
    <div class="mb-5">
        <h5 class="mb-3 pb-2 border-bottom border-3">@group.Key.Name</h5>
        @foreach (var set in group.OrderBy(s => s.Name))
        {
            var bgColour = set.IsAvailable ? (set.Colour ?? "#6366f1") : "#6c757d";
            var fontColour = ColourHelper.FontColour(bgColour);

            <div class="card shadow-sm mb-4">
                <div class="card-header py-3 position-relative clearfix" id="header-@set.ItemId" style="background-color: @bgColour; color: @fontColour;" data-original-color="@bgColour" data-original-font-color="@fontColour">
                    <div class="float-start">
                        <h5 class="card-title mb-0 fw-bold @(!set.IsAvailable ? "fst-italic" : "")">@set.Name</h5>
                    </div>
                    <button type="button" class="btn btn-sm btn-danger float-end"
                            title="Delete Menu Set" onclick="confirmDelete('@set.Name', '/Menu/DeleteSet?id=@set.ItemId', 'set-list', '/Menu/GetSetsList')">
                        <i class="fa-solid fa-trash"></i> Delete
                    </button>
                    <button type="button" class="btn btn-sm btn-primary float-end"
                            title="Edit Menu Set" onclick="location.assign('/Menu/Sets/Edit/@set.ItemId')">
                        <i class="fa-solid fa-pencil"></i> Edit
                    </button>
                </div>
                <div class="card-body">
                    <p class="card-text text-muted">@set.Description</p>
                    @if (set.ItemsToTags?.Any() == true)
                    {
                        <div class="mb-3">
                            @foreach (var itemToTag in set.ItemsToTags)
                            {
                                <span class="me-2 mb-2 d-inline-block">
                                    <partial name="Menu/_ItemTagBadge" model="itemToTag.ItemTag"/>
                                </span>
                            }
                        </div>
                    }
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span class="fs-5 fw-bold text-primary">@set.Price.ToString("C")</span>
                        <div class="form-check form-switch">
                            @if (set.IsAvailable)
                            {
                                <input class="form-check-input" type="checkbox" id="toggle-@set.ItemId" checked onchange="toggleSetAvailability('@set.ItemId', false)"/>
                            }
                            else
                            {
                                <input class="form-check-input" type="checkbox" id="toggle-@set.ItemId" onchange="toggleSetAvailability('@set.ItemId', true)"/>
                            }
                            <label class="form-check-label" id="label-@set.ItemId" for="toggle-@set.ItemId">@(set.IsAvailable ? "Available" : "Unavailable")</label>
                        </div>
                    </div>

                    @if (set.ItemsToSets?.Any() == true)
                    {
                        var items = set.ItemsToSets.Select(its => its.MenuItem).ToList();
                        var groupedItems = items.GroupBy(i => i.ItemType).OrderBy(g => g.Key?.Order ?? int.MaxValue).ToList();
                        
                        <hr class="my-3"/>
                        <h5 class="mb-3">Included Items</h5>
                        <partial name="Shared/Menu/_MenuItemTable" model="(groupedItems, true)" />
                    }
                </div>
            </div>
        }
    </div>
}